{"ast":null,"code":"var _jsxFileName = \"/home/dominykas/year4/Individual-Project/website/client/src/RunNew.js\";\nimport React, { Component } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik'; // class RunNew extends Component {\n//   render() {\n//     return (\n//       <div>\n//         <h2>Configure a new test</h2>\n//           <form method='POST' action='/new_job'>\n//               <button>Run</button>\n//           </form>\n//\n//           <form method='POST' action='/remove_job'>\n//               <button>Remove</button>\n//           </form>\n//\n//           <form>\n//               <label>\n//                   Name:\n//                   <input type=\"text\" name=\"name\" />\n//                   Page load time:\n//                   <input type=\"text\" name=\"name\" />\n//                   Number of requests per load:\n//                   <input type=\"text\" name=\"name\" />\n//               </label>\n//               <input type=\"submit\" value=\"Submit\" />\n//           </form>\n//           {/*<button*/}\n//         {/*    className=\"btn btn-default\"*/}\n//         {/*    // style={buttonStyle}*/}\n//         {/*    // onClick={createNewJob()}*/}\n//         {/*>{\"Run new\"}*/}\n//         {/*</button>*/}\n//       </div>\n//     );\n//   }\n// }\n// export default RunNew;\n//\n//\n// import React from 'react';\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\n\nconst RunNew = () => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}, \"Any place in your app!\"), React.createElement(Formik, {\n  initialValues: {\n    pageLoadTime: '',\n    password: ''\n  },\n  validate: values => {\n    const errors = {};\n\n    if (!values.pageLoadTime) {\n      errors.pageLoadTime = 'Required';\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.pageLoadTime)) {\n      errors.pageLoadTime = 'Invalid pageLoadTime address';\n    }\n\n    return errors;\n  },\n  onSubmit: (values, {\n    setSubmitting\n  }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 400);\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}, ({\n  isSubmitting\n}) => React.createElement(Form, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  id: \"frm\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 71\n  },\n  __self: this\n}, React.createElement(\"label\", {\n  htmlFor: \"pageLoadTime\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72\n  },\n  __self: this\n}, \"First Name: \"), React.createElement(Field, {\n  type: \"pageLoadTime\",\n  name: \"pageLoadTime\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73\n  },\n  __self: this\n})), React.createElement(ErrorMessage, {\n  name: \"pageLoadTime\",\n  component: \"div\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75\n  },\n  __self: this\n}), React.createElement(Field, {\n  id: \"frm\",\n  type: \"password\",\n  name: \"password\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76\n  },\n  __self: this\n}), React.createElement(ErrorMessage, {\n  name: \"password\",\n  component: \"div\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  type: \"submit\",\n  disabled: isSubmitting,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78\n  },\n  __self: this\n}, \"Submit\"))));\n\nexport default RunNew;","map":{"version":3,"sources":["/home/dominykas/year4/Individual-Project/website/client/src/RunNew.js"],"names":["React","Component","Formik","Form","Field","ErrorMessage","RunNew","pageLoadTime","password","values","errors","test","setSubmitting","setTimeout","alert","JSON","stringify","isSubmitting"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAG,MACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI,oBAAC,MAAD;AACI,EAAA,aAAa,EAAE;AAAEC,IAAAA,YAAY,EAAE,EAAhB;AAAoBC,IAAAA,QAAQ,EAAE;AAA9B,GADnB;AAEI,EAAA,QAAQ,EAAEC,MAAM,IAAI;AAChB,UAAMC,MAAM,GAAG,EAAf;;AACA,QAAI,CAACD,MAAM,CAACF,YAAZ,EAA0B;AACtBG,MAAAA,MAAM,CAACH,YAAP,GAAsB,UAAtB;AACH,KAFD,MAEO,IACH,CAAC,2CAA2CI,IAA3C,CAAgDF,MAAM,CAACF,YAAvD,CADE,EAEL;AACEG,MAAAA,MAAM,CAACH,YAAP,GAAsB,8BAAtB;AACH;;AACD,WAAOG,MAAP;AACH,GAZL;AAaI,EAAA,QAAQ,EAAE,CAACD,MAAD,EAAS;AAAEG,IAAAA;AAAF,GAAT,KAA+B;AACrCC,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeP,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAG,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAHS,EAGP,GAHO,CAAV;AAIH,GAlBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAqBK,CAAC;AAAEK,EAAAA;AAAF,CAAD,KACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAK,EAAA,EAAE,EAAE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACA;AAAO,EAAA,OAAO,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAEA,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,cAAZ;AAA2B,EAAA,IAAI,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFA,CADJ,EAKI,oBAAC,YAAD;AAAc,EAAA,IAAI,EAAC,cAAnB;AAAkC,EAAA,SAAS,EAAC,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EALJ,EAMI,oBAAC,KAAD;AAAO,EAAA,EAAE,EAAE,KAAX;AAAkB,EAAA,IAAI,EAAC,UAAvB;AAAkC,EAAA,IAAI,EAAC,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EANJ,EAOI,oBAAC,YAAD;AAAc,EAAA,IAAI,EAAC,UAAnB;AAA8B,EAAA,SAAS,EAAC,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAPJ,EAQI;AAAQ,EAAA,IAAI,EAAC,QAAb;AAAsB,EAAA,QAAQ,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,CAtBR,CAFJ,CADJ;;AA0CA,eAAeX,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\n// class RunNew extends Component {\n//   render() {\n//     return (\n//       <div>\n//         <h2>Configure a new test</h2>\n//           <form method='POST' action='/new_job'>\n//               <button>Run</button>\n//           </form>\n//\n//           <form method='POST' action='/remove_job'>\n//               <button>Remove</button>\n//           </form>\n//\n//           <form>\n//               <label>\n//                   Name:\n//                   <input type=\"text\" name=\"name\" />\n//                   Page load time:\n//                   <input type=\"text\" name=\"name\" />\n//                   Number of requests per load:\n//                   <input type=\"text\" name=\"name\" />\n//               </label>\n//               <input type=\"submit\" value=\"Submit\" />\n//           </form>\n//           {/*<button*/}\n//         {/*    className=\"btn btn-default\"*/}\n//         {/*    // style={buttonStyle}*/}\n//         {/*    // onClick={createNewJob()}*/}\n//         {/*>{\"Run new\"}*/}\n//         {/*</button>*/}\n//       </div>\n//     );\n//   }\n// }\n \n// export default RunNew;\n//\n//\n// import React from 'react';\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\n\nconst RunNew = () => (\n    <div>\n        <h1>Any place in your app!</h1>\n        <Formik\n            initialValues={{ pageLoadTime: '', password: '' }}\n            validate={values => {\n                const errors = {};\n                if (!values.pageLoadTime) {\n                    errors.pageLoadTime = 'Required';\n                } else if (\n                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.pageLoadTime)\n                ) {\n                    errors.pageLoadTime = 'Invalid pageLoadTime address';\n                }\n                return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n                setTimeout(() => {\n                    alert(JSON.stringify(values, null, 2));\n                    setSubmitting(false);\n                }, 400);\n            }}\n        >\n\n            {({ isSubmitting }) => (\n                <Form>\n                    <div id={\"frm\"}>\n                    <label htmlFor=\"pageLoadTime\">First Name: </label>\n                    <Field type=\"pageLoadTime\" name=\"pageLoadTime\" />\n                </div>\n                    <ErrorMessage name=\"pageLoadTime\" component=\"div\" />\n                    <Field id={\"frm\"} type=\"password\" name=\"password\" />\n                    <ErrorMessage name=\"password\" component=\"div\" />\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Submit\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n);\n\nexport default RunNew;"]},"metadata":{},"sourceType":"module"}